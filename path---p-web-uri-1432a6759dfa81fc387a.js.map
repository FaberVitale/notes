{"version":3,"sources":["webpack:///path---p-web-uri-1432a6759dfa81fc387a.js","webpack:///./.cache/json/p-web-uri.json"],"names":["webpackJsonp","473","module","exports","data","markdownRemark","html","frontmatter","date","path","title","section","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+jJAA03GC,aAAs0CC,KAAA,eAAAC,KAAA,aAAAC,MAAA,oCAAAC,QAAA,SAAwGC","file":"path---p-web-uri-1432a6759dfa81fc387a.js","sourcesContent":["webpackJsonp([45151606756310],{\n\n/***/ 473:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>A string that identifies a resource according to a schema.\\nsuper-type of:</p>\\n<ul>\\n<li>URL: defines the means to access a resource(e.g webisite page).</li>\\n<li>URN: defines a unique resource in a namespace(e.g. isbn)</li>\\n</ul>\\n<h2>Syntax</h2>\\n<pre><code>ALPHA = a-z / A-Z\\nDIGIT = 0-9\\n</code></pre>\\n<h3>Reserved Characters:</h3>\\n<pre><code>  reserved    = gen-delims / sub-delims\\n\\n  gen-delims  = \\\":\\\" / \\\"/\\\" / \\\"?\\\" / \\\"#\\\" / \\\"[\\\" / \\\"]\\\" / \\\"@\\\"\\n\\n  sub-delims  = \\\"!\\\" / \\\"$\\\" / \\\"&#x26;\\\" / \\\"'\\\" / \\\"(\\\" / \\\")\\\"\\n              / \\\"*\\\" / \\\"+\\\" / \\\",\\\" / \\\";\\\" / \\\"=\\\"\\n</code></pre>\\n<p>Characters used to delimit parts of a URI and shouldnt be encoded,\\nif used as delimiters.\\nApplication should (percent)-encode these characters, unless allowed by the uri scheme.</p>\\n<h3>Unreserved Characters:</h3>\\n<pre><code>unreserved = a-z / A-Z / 0-9 / \\\"-\\\" / \\\".\\\" / \\\"_\\\" / \\\"~\\\"\\n</code></pre>\\n<p>Characters allowed in an uri that do not have a special purpose</p>\\n<h3>URI Parts</h3>\\n<pre><code>  foo://example.com:8042/over/there?name=ferret#nose\\n  \\\\_/   \\\\______________/\\\\_________/ \\\\_________/ \\\\__/\\n  |           |            |            |        |\\n  scheme     authority       path        query   fragment\\n</code></pre>\\n<h3>Scheme</h3>\\n<pre><code>scheme      = ALPHA *( ALPHA / DIGIT / \\\"+\\\" / \\\"-\\\" / \\\".\\\" )\\n</code></pre>\\n<p>defines the specification of the uri, schemes should be registerd to IANA.</p>\\n<h3>Authority</h3>\\n<pre><code>authority = [ userinfo \\\"@\\\" ] host [ \\\":\\\" port ]\\n</code></pre>\\n<p>the authority component is preceded by a double slash (\\\"//\\\") and is\\nterminated by the next slash (\\\"/\\\"), question mark (\\\"?\\\"), or number\\nsign (\\\"#\\\") character, or by the end of the URI.</p>\\n<h4>userinfo</h4>\\n<p>The userinfo subcomponent may consist of a user name and, optionally,\\nscheme-specific information about how to gain authorization to access the resource.\\nThe user information, if present, is followed by a commercial at-sign (\\\"@\\\") that delimits it from the host.</p>\\n<h4>host</h4>\\n<pre><code>host = IP-literal / IPv4address / reg-name\\n</code></pre>\\n<p>Name registered for DNS</p>\\n<pre><code>reg-name    = *( unreserved / pct-encoded / sub-delims )\\n</code></pre>\\n<h4>port</h4>\\n<pre><code>port = DIGIT\\n</code></pre>\\n<p>a sequence of digits that defines the socket port</p>\\n<h3>Path</h3>\\n<p>The path component contains data, usually organized in hierarchical\\nform, that, along with data in the non-hierarchical query component,\\nserves to identify a resource within the scope of the\\nURI's scheme and naming authority (if any).  The path is terminated\\nby the first question mark (\\\"?\\\") or number sign (\\\"#\\\") character, or\\nby the end of the URI.</p>\\n<pre><code>  path          = path-abempty    ; begins with \\\"/\\\" or is empty\\n                / path-absolute   ; begins with \\\"/\\\" but not \\\"//\\\"\\n                / path-noscheme   ; begins with a non-colon segment\\n                / path-rootless   ; begins with a segment\\n                / path-empty      ; zero characters\\n\\n  path-abempty  = *( \\\"/\\\" segment )\\n  path-absolute = \\\"/\\\" [ segment-nz *( \\\"/\\\" segment ) ]\\n  path-noscheme = segment-nz-nc *( \\\"/\\\" segment )\\n  path-rootless = segment-nz *( \\\"/\\\" segment )\\n  path-empty    = 0&#x3C;pchar>\\n\\n  segment       = *pchar\\n  segment-nz    = 1*pchar\\n  segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \\\"@\\\" )\\n                ; non-zero-length segment without any colon \\\":\\\"\\n\\n  pchar         = unreserved / pct-encoded / sub-delims / \\\":\\\" / \\\"@\\\"\\n</code></pre>\\n<p>A path consists of a sequence of path segments separated by a slash\\n(\\\"/\\\") character.  A path is always defined for a URI, though the\\ndefined path may be empty (zero length).  Use of the slash character\\nto indicate hierarchy is only required when a URI will be used as the\\ncontext for relative references.</p>\\n<h3>Query</h3>\\n<p>The query component contains non-hierarchical data that, along with\\ndata in the path component, serves to identify a\\nresource within the scope of the URI's scheme and naming authority\\n(if any).  The query component is indicated by the first question\\nmark (\\\"?\\\") character and terminated by a number sign (\\\"#\\\") character\\nor by the end of the URI.</p>\\n<pre><code> query = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n</code></pre>\\n<h3>Fragment</h3>\\n<p>The fragment identifier component of a URI allows indirect\\nidentification of a secondary resource by reference to a primary\\nresource and additional identifying information.\\nFollows the path or query,separated by the <code>\\\"#\\\"</code> sign.</p>\\n<pre><code>fragment = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n</code></pre>\\n<h2>Reference</h2>\\n<ul>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc3986\\\">RFC</a></li>\\n</ul>\",\"frontmatter\":{\"date\":\"May 27, 2018\",\"path\":\"/p/web/uri\",\"title\":\"URI (Uniform resource identifier)\",\"section\":\"web\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---p-web-uri-1432a6759dfa81fc387a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>A string that identifies a resource according to a schema.\\nsuper-type of:</p>\\n<ul>\\n<li>URL: defines the means to access a resource(e.g webisite page).</li>\\n<li>URN: defines a unique resource in a namespace(e.g. isbn)</li>\\n</ul>\\n<h2>Syntax</h2>\\n<pre><code>ALPHA = a-z / A-Z\\nDIGIT = 0-9\\n</code></pre>\\n<h3>Reserved Characters:</h3>\\n<pre><code>  reserved    = gen-delims / sub-delims\\n\\n  gen-delims  = \\\":\\\" / \\\"/\\\" / \\\"?\\\" / \\\"#\\\" / \\\"[\\\" / \\\"]\\\" / \\\"@\\\"\\n\\n  sub-delims  = \\\"!\\\" / \\\"$\\\" / \\\"&#x26;\\\" / \\\"'\\\" / \\\"(\\\" / \\\")\\\"\\n              / \\\"*\\\" / \\\"+\\\" / \\\",\\\" / \\\";\\\" / \\\"=\\\"\\n</code></pre>\\n<p>Characters used to delimit parts of a URI and shouldnt be encoded,\\nif used as delimiters.\\nApplication should (percent)-encode these characters, unless allowed by the uri scheme.</p>\\n<h3>Unreserved Characters:</h3>\\n<pre><code>unreserved = a-z / A-Z / 0-9 / \\\"-\\\" / \\\".\\\" / \\\"_\\\" / \\\"~\\\"\\n</code></pre>\\n<p>Characters allowed in an uri that do not have a special purpose</p>\\n<h3>URI Parts</h3>\\n<pre><code>  foo://example.com:8042/over/there?name=ferret#nose\\n  \\\\_/   \\\\______________/\\\\_________/ \\\\_________/ \\\\__/\\n  |           |            |            |        |\\n  scheme     authority       path        query   fragment\\n</code></pre>\\n<h3>Scheme</h3>\\n<pre><code>scheme      = ALPHA *( ALPHA / DIGIT / \\\"+\\\" / \\\"-\\\" / \\\".\\\" )\\n</code></pre>\\n<p>defines the specification of the uri, schemes should be registerd to IANA.</p>\\n<h3>Authority</h3>\\n<pre><code>authority = [ userinfo \\\"@\\\" ] host [ \\\":\\\" port ]\\n</code></pre>\\n<p>the authority component is preceded by a double slash (\\\"//\\\") and is\\nterminated by the next slash (\\\"/\\\"), question mark (\\\"?\\\"), or number\\nsign (\\\"#\\\") character, or by the end of the URI.</p>\\n<h4>userinfo</h4>\\n<p>The userinfo subcomponent may consist of a user name and, optionally,\\nscheme-specific information about how to gain authorization to access the resource.\\nThe user information, if present, is followed by a commercial at-sign (\\\"@\\\") that delimits it from the host.</p>\\n<h4>host</h4>\\n<pre><code>host = IP-literal / IPv4address / reg-name\\n</code></pre>\\n<p>Name registered for DNS</p>\\n<pre><code>reg-name    = *( unreserved / pct-encoded / sub-delims )\\n</code></pre>\\n<h4>port</h4>\\n<pre><code>port = DIGIT\\n</code></pre>\\n<p>a sequence of digits that defines the socket port</p>\\n<h3>Path</h3>\\n<p>The path component contains data, usually organized in hierarchical\\nform, that, along with data in the non-hierarchical query component,\\nserves to identify a resource within the scope of the\\nURI's scheme and naming authority (if any).  The path is terminated\\nby the first question mark (\\\"?\\\") or number sign (\\\"#\\\") character, or\\nby the end of the URI.</p>\\n<pre><code>  path          = path-abempty    ; begins with \\\"/\\\" or is empty\\n                / path-absolute   ; begins with \\\"/\\\" but not \\\"//\\\"\\n                / path-noscheme   ; begins with a non-colon segment\\n                / path-rootless   ; begins with a segment\\n                / path-empty      ; zero characters\\n\\n  path-abempty  = *( \\\"/\\\" segment )\\n  path-absolute = \\\"/\\\" [ segment-nz *( \\\"/\\\" segment ) ]\\n  path-noscheme = segment-nz-nc *( \\\"/\\\" segment )\\n  path-rootless = segment-nz *( \\\"/\\\" segment )\\n  path-empty    = 0&#x3C;pchar>\\n\\n  segment       = *pchar\\n  segment-nz    = 1*pchar\\n  segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \\\"@\\\" )\\n                ; non-zero-length segment without any colon \\\":\\\"\\n\\n  pchar         = unreserved / pct-encoded / sub-delims / \\\":\\\" / \\\"@\\\"\\n</code></pre>\\n<p>A path consists of a sequence of path segments separated by a slash\\n(\\\"/\\\") character.  A path is always defined for a URI, though the\\ndefined path may be empty (zero length).  Use of the slash character\\nto indicate hierarchy is only required when a URI will be used as the\\ncontext for relative references.</p>\\n<h3>Query</h3>\\n<p>The query component contains non-hierarchical data that, along with\\ndata in the path component, serves to identify a\\nresource within the scope of the URI's scheme and naming authority\\n(if any).  The query component is indicated by the first question\\nmark (\\\"?\\\") character and terminated by a number sign (\\\"#\\\") character\\nor by the end of the URI.</p>\\n<pre><code> query = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n</code></pre>\\n<h3>Fragment</h3>\\n<p>The fragment identifier component of a URI allows indirect\\nidentification of a secondary resource by reference to a primary\\nresource and additional identifying information.\\nFollows the path or query,separated by the <code>\\\"#\\\"</code> sign.</p>\\n<pre><code>fragment = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n</code></pre>\\n<h2>Reference</h2>\\n<ul>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc3986\\\">RFC</a></li>\\n</ul>\",\"frontmatter\":{\"date\":\"May 27, 2018\",\"path\":\"/p/web/uri\",\"title\":\"URI (Uniform resource identifier)\",\"section\":\"web\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/p-web-uri.json\n// module id = 473\n// module chunks = 45151606756310"],"sourceRoot":""}