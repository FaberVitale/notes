webpackJsonp([21735359339305],{511:function(e,t){e.exports={data:{site:{siteMetadata:{title:"Notes"}},allMarkdownRemark:{edges:[{node:{excerpt:"Before the 6th edition of the ecmascript specification in javascript you could only \ndeclare function-scoped variables with  .\n  allows to declare block-scoped variables.  let var…",frontmatter:{path:"/p/js/let-vs-var",title:"Let vs Var",section:"js"}}},{node:{excerpt:"  A promise is an object that is a placeholder of a deferred computation. Invariants a promise is in one of 3  mutually  exclusive states:  fulfilled, rejected or pending a promise…",frontmatter:{path:"/p/js/promise",title:"Promise",section:"js"}}},{node:{excerpt:"Opt-in using the pragma  Applied to the top of a function makes the whole function run in strict mode.\nApplied to the top of a script makes the whole script run in strict mode.\nes…",frontmatter:{path:"/p/js/strict-mode",title:"Strict Mode",section:"js"}}},{node:{excerpt:"Js is an object-oriented language where objects can be connect and share properties.\nObjects can be constructed using  constructor  functions. A  constructor  is a function that…",frontmatter:{path:"/p/js/object-and-types",title:"Object and Types",section:"js"}}},{node:{excerpt:"This is a keyword that class-based object oriented languages(e.g. Java)\nuse to get a reference of current object instantiated from a class.\nIn javascript, it is used to emulate…",frontmatter:{path:"/p/js/this",title:"What's This?",section:"js"}}},{node:{excerpt:"Introduced with the 6th edition of the ecmascript specification,\nmodules introduce a native way to segment the code in chunks.  The api of an es6 module is static:  imports/exports…",frontmatter:{path:"/p/js/es6-modules",title:"Es6 Modules",section:"js"}}}]}},pathContext:{section:"js"}}}});
//# sourceMappingURL=path---p-js-3412a19ef3a3cd122b1c.js.map