{"version":3,"sources":["webpack:///path---p-js-31a7ebfe83d610bcc1b6.js","webpack:///./.cache/json/p-js.json"],"names":["webpackJsonp","511","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","excerpt","frontmatter","path","section","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,UAAiBC,mBAAsBC,QAAUC,MAAQC,QAAA,sLAAAC,aAA+MC,KAAA,aAAAN,MAAA,eAAAO,QAAA,SAA8DJ,MAAQC,QAAA,wLAAAC,aAAiNC,KAAA,gBAAAN,MAAA,UAAAO,QAAA,SAA4DJ,MAAQC,QAAA,yLAAAC,aAAkNC,KAAA,yBAAAN,MAAA,mBAAAO,QAAA,SAA8EJ,MAAQC,QAAA,wLAAAC,aAAiNC,KAAA,oBAAAN,MAAA,cAAAO,QAAA,SAAoEJ,MAAQC,QAAA,yLAAAC,aAAkNC,KAAA,mBAAAN,MAAA,aAAAO,QAAA,SAAkEJ,MAAQC,QAAA,yLAAAC,aAAkNC,KAAA,oBAAAN,MAAA,cAAAO,QAAA,WAAqEC,aAAgBD,QAAA","file":"path---p-js-31a7ebfe83d610bcc1b6.js","sourcesContent":["webpackJsonp([21735359339305],{\n\n/***/ 511:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Notes\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"This is a keyword that class-based object oriented languages(e.g. Java)\\nuse to get a reference of current object instantiated from a class.\\nIn javascript, it is used to emulate…\",\"frontmatter\":{\"path\":\"/p/js/this\",\"title\":\"What's This?\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"  A promise is an object that is a placeholder of a deferred computation. Invariants a promise is in one of 3  mutually  exclusive states:  fulfilled, rejected or pending a promise…\",\"frontmatter\":{\"path\":\"/p/js/promise\",\"title\":\"Promise\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Js is a object-oriented language where objects can be connect and share properties.\\nObjects can be constructed using  constructor  functions. A  constructor  is a function that, if…\",\"frontmatter\":{\"path\":\"/p/js/object-and-types\",\"title\":\"Object and Types\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Introduced with the 6th edition of the ecmascript specification,\\nmodules provides a native way to segment the code in chunks.  The api of an es6 module is static:  imports/exports…\",\"frontmatter\":{\"path\":\"/p/js/es6-modules\",\"title\":\"Es6 Modules\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Before the 6th edition of the ecmascript specification in javascript you could only \\ndeclare function-scoped variables with  .\\n  allows to declare block-scoped variables.  let var…\",\"frontmatter\":{\"path\":\"/p/js/let-vs-var\",\"title\":\"Let vs Var\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Opt-in using the pragma  Applied to the top of a function makes the whole function run in strict mode.\\nApplied to the top of a script makes the whole script run in strict mode.\\nes…\",\"frontmatter\":{\"path\":\"/p/js/strict-mode\",\"title\":\"Strict Mode\",\"section\":\"js\"}}}]}},\"pathContext\":{\"section\":\"js\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---p-js-31a7ebfe83d610bcc1b6.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Notes\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"This is a keyword that class-based object oriented languages(e.g. Java)\\nuse to get a reference of current object instantiated from a class.\\nIn javascript, it is used to emulate…\",\"frontmatter\":{\"path\":\"/p/js/this\",\"title\":\"What's This?\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"  A promise is an object that is a placeholder of a deferred computation. Invariants a promise is in one of 3  mutually  exclusive states:  fulfilled, rejected or pending a promise…\",\"frontmatter\":{\"path\":\"/p/js/promise\",\"title\":\"Promise\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Js is a object-oriented language where objects can be connect and share properties.\\nObjects can be constructed using  constructor  functions. A  constructor  is a function that, if…\",\"frontmatter\":{\"path\":\"/p/js/object-and-types\",\"title\":\"Object and Types\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Introduced with the 6th edition of the ecmascript specification,\\nmodules provides a native way to segment the code in chunks.  The api of an es6 module is static:  imports/exports…\",\"frontmatter\":{\"path\":\"/p/js/es6-modules\",\"title\":\"Es6 Modules\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Before the 6th edition of the ecmascript specification in javascript you could only \\ndeclare function-scoped variables with  .\\n  allows to declare block-scoped variables.  let var…\",\"frontmatter\":{\"path\":\"/p/js/let-vs-var\",\"title\":\"Let vs Var\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Opt-in using the pragma  Applied to the top of a function makes the whole function run in strict mode.\\nApplied to the top of a script makes the whole script run in strict mode.\\nes…\",\"frontmatter\":{\"path\":\"/p/js/strict-mode\",\"title\":\"Strict Mode\",\"section\":\"js\"}}}]}},\"pathContext\":{\"section\":\"js\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/p-js.json\n// module id = 511\n// module chunks = 21735359339305"],"sourceRoot":""}