{"version":3,"sources":["webpack:///path---p-js-es-6-modules-830504dcee76d735d1e3.js","webpack:///./.cache/json/p-js-es-6-modules.json"],"names":["webpackJsonp","464","module","exports","data","markdownRemark","html","frontmatter","date","path","title","section","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,w9BAA08BC,aAAwCC,KAAA,eAAAC,KAAA,oBAAAC,MAAA,cAAAC,QAAA,QAAwFC","file":"path---p-js-es-6-modules-830504dcee76d735d1e3.js","sourcesContent":["webpackJsonp([125898239544108],{\n\n/***/ 464:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Es6 modules are file-based, aka one per file.\\nThe api of an es6 module is static: </p>\\n<ul>\\n<li>imports/exports can only be defined at the top level</li>\\n<li>once defined these bindings cannot be changed.</li>\\n<li>they are singleton, one instance per module.\\nThe modules are loaded using a default loader or a custom one.</li>\\n</ul>\\n<h2>General Features</h2>\\n<ul>\\n<li>Code inside a module is always run in strict-mode.</li>\\n<li>imports/ exports are statically defined, cant be conditional.</li>\\n<li>Modules have still access to the global object of the environment and its properties.</li>\\n</ul>\\n<h2>Imports</h2>\\n<p>To import a module an import statement is required.</p>\\n<p>the module specifier (the string after from) has to be a <strong>string literal</strong>.</p>\\n<p>In (only chrome so far) browsers modules can be inlined using the syntax:</p>\\n<pre><code class=\\\"language-html\\\">  &#x3C;script type=\\\"module\\\"> export default 42;&#x3C;/script>\\n</code></pre>\",\"frontmatter\":{\"date\":\"May 27, 2018\",\"path\":\"/p/js/es6-modules\",\"title\":\"Es6 Modules\",\"section\":\"js\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---p-js-es-6-modules-830504dcee76d735d1e3.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Es6 modules are file-based, aka one per file.\\nThe api of an es6 module is static: </p>\\n<ul>\\n<li>imports/exports can only be defined at the top level</li>\\n<li>once defined these bindings cannot be changed.</li>\\n<li>they are singleton, one instance per module.\\nThe modules are loaded using a default loader or a custom one.</li>\\n</ul>\\n<h2>General Features</h2>\\n<ul>\\n<li>Code inside a module is always run in strict-mode.</li>\\n<li>imports/ exports are statically defined, cant be conditional.</li>\\n<li>Modules have still access to the global object of the environment and its properties.</li>\\n</ul>\\n<h2>Imports</h2>\\n<p>To import a module an import statement is required.</p>\\n<p>the module specifier (the string after from) has to be a <strong>string literal</strong>.</p>\\n<p>In (only chrome so far) browsers modules can be inlined using the syntax:</p>\\n<pre><code class=\\\"language-html\\\">  &#x3C;script type=\\\"module\\\"> export default 42;&#x3C;/script>\\n</code></pre>\",\"frontmatter\":{\"date\":\"May 27, 2018\",\"path\":\"/p/js/es6-modules\",\"title\":\"Es6 Modules\",\"section\":\"js\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/p-js-es-6-modules.json\n// module id = 464\n// module chunks = 125898239544108"],"sourceRoot":""}