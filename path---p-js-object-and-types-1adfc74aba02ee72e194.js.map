{"version":3,"sources":["webpack:///path---p-js-object-and-types-1adfc74aba02ee72e194.js","webpack:///./.cache/json/p-js-object-and-types.json"],"names":["webpackJsonp","465","module","exports","data","markdownRemark","html","frontmatter","date","path","title","section","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4pJAAw1GC,aAAk2CC,KAAA,eAAAC,KAAA,yBAAAC,MAAA,mBAAAC,QAAA,QAAkGC","file":"path---p-js-object-and-types-1adfc74aba02ee72e194.js","sourcesContent":["webpackJsonp([172192788197335],{\n\n/***/ 465:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Definition</h2>\\n<p>  Js is a object-oriented language where objects can be connect and share properties.\\nObjects can be constructed using <em>constructor</em> functions.</p>\\n<p>  A <em>constructor</em> is a function invoked with the <em>new</em> keyword.</p>\\n<p>  Each <em>constructor</em> has a property named <em>prototype</em> that is used to implement prototype-based inheritance.</p>\\n<p>  An object has an internal property that links  to the prototype chain and property look-ups\\nare done going-up the prototype chain.</p>\\n<h3>Primitive Types</h3>\\n<p>  The language defines the following primitive types:</p>\\n<ul>\\n<li>string</li>\\n<li>number</li>\\n<li>boolean</li>\\n<li>null</li>\\n<li>undefined</li>\\n<li>object</li>\\n<li>Symbol</li>\\n</ul>\\n<p>  Note that <em>string, number, boolean, null and undefined</em> are not themselves objects.\\nstring, number, boolean have Boxed types for ease of use.</p>\\n<p>  null and undefined have no wrapper form.</p>\\n<p>  undefined is a property of the global object that cannot be modified(in es6).\\nany reference that has not been assigned has value undefined.</p>\\n<p>  null is not a property of the global object, is not an object even tho </p>\\n<pre><code class=\\\"language-js\\\">(typeof null === \\\"object\\\") // true\\n</code></pre>\\n<h3>Property Descriptors</h3>\\n<p>Introduced in ES6, these attrbutes describe the   </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>[[Value]]</code></td>\\n<td>any</td>\\n<td>the value retrieved by this property</td>\\n</tr>\\n<tr>\\n<td><code>[[Writable]]</code></td>\\n<td>bool</td>\\n<td>if false the \\n<code>[[Value]]</code>\\n cant be changed</td>\\n</tr>\\n<tr>\\n<td><code>[[Enumerable]]</code></td>\\n<td>bool</td>\\n<td>if false property wont show up in for.. in loops</td>\\n</tr>\\n<tr>\\n<td><code>[[Configurable]]</code></td>\\n<td>bool</td>\\n<td>if false prop cant be deleted nor its property descriptors mutated</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Attempts at forbidden modification given configurable and/or  writable are silently ignored in lazy mode\\nand cause errors in strict.</p>\\n<p>A prop declared <code>[[Configurable]]</code> false cant be changed to true later.\\nIt is a one-way operation.</p>\\n<h3>Accessor properties</h3>\\n<p><code>[[Get]]</code> <code>[[Set]]</code> are functions that are called as accessors, mutators.</p>\\n<h4>Default values</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Property Descriptor</th>\\n<th>default value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>[[Value]]</code></td>\\n<td>undfined</td>\\n</tr>\\n<tr>\\n<td><code>[[Get]]</code></td>\\n<td>undefined</td>\\n</tr>\\n<tr>\\n<td><code>[[Set]]</code></td>\\n<td>undefined</td>\\n</tr>\\n<tr>\\n<td><code>[[Writable]]</code></td>\\n<td>false</td>\\n</tr>\\n<tr>\\n<td><code>[[Enumerable]]</code></td>\\n<td>false</td>\\n</tr>\\n<tr>\\n<td><code>[[Configurable]]</code></td>\\n<td>false</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3>Object.defineProperty</h3>\\n<p>  Object.defineProperty<T>(obj: T, prop: string, descr: descrObject): T</p>\\n<pre><code class=\\\"language-js\\\">  const obj = {};\\n\\n  Object.defineProperty(\\n    obj, \\n    \\\"meaningOfLife\\\", \\n    { \\n      value: 42, \\n      writable: false, \\n      configurable: false, \\n      enumerable: true\\n    }\\n  );\\n</code></pre>\\n<h2>Seal, Freeze, PreventExtensions</h2>\\n<ol>\\n<li><code>Object.preventExtensions(obj);</code>: it is not possible to add new properties to obj</li>\\n<li><code>Object.seal(obj)</code>: like 1. but every existing prop has configurable set to false</li>\\n<li><code>Object.freeze(obj)</code>: like 2. but every prop has writable set to false</li>\\n</ol>\\n<h2>Prototype</h2>\\n<p>Objects in js hae an internal property <code>[[Prototype]]</code> that links them to another object.</p>\\n<p>Whenever a property is looked-up in an object, if it not present it is looked up recursively in the prototype chain and if present it is returned otherwise undefined is the reuslt of the look up.</p>\\n<p>Similarly in a for..in iteration all the prop in the chain are returned.</p>\\n<p>At the top of most chains is Object.prototype, this object includes most common util methods.</p>\\n<h3>Shadowing</h3>\\n<p>Whenever a prop that is already defined on the prototype chain is defined on an object the following occurs:</p>\\n<ol>\\n<li>\\n<p>If that prop is marked as <code>writable: false</code> an error is thrown is strict or is silently ignored.</p>\\n</li>\\n<li>\\n<p>If that prop is a mutator (set) the function is <strong>always</strong> callled no shadowing occurs.</p>\\n</li>\\n<li>\\n<p>if the previous conditions are not met, the object is successfully added to the object and it <strong>shadows</strong> the prop defined in the prototype chain.</p>\\n</li>\\n</ol>\",\"frontmatter\":{\"date\":\"May 27, 2018\",\"path\":\"/p/js/object-and-types\",\"title\":\"Object and Types\",\"section\":\"js\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---p-js-object-and-types-1adfc74aba02ee72e194.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Definition</h2>\\n<p>  Js is a object-oriented language where objects can be connect and share properties.\\nObjects can be constructed using <em>constructor</em> functions.</p>\\n<p>  A <em>constructor</em> is a function invoked with the <em>new</em> keyword.</p>\\n<p>  Each <em>constructor</em> has a property named <em>prototype</em> that is used to implement prototype-based inheritance.</p>\\n<p>  An object has an internal property that links  to the prototype chain and property look-ups\\nare done going-up the prototype chain.</p>\\n<h3>Primitive Types</h3>\\n<p>  The language defines the following primitive types:</p>\\n<ul>\\n<li>string</li>\\n<li>number</li>\\n<li>boolean</li>\\n<li>null</li>\\n<li>undefined</li>\\n<li>object</li>\\n<li>Symbol</li>\\n</ul>\\n<p>  Note that <em>string, number, boolean, null and undefined</em> are not themselves objects.\\nstring, number, boolean have Boxed types for ease of use.</p>\\n<p>  null and undefined have no wrapper form.</p>\\n<p>  undefined is a property of the global object that cannot be modified(in es6).\\nany reference that has not been assigned has value undefined.</p>\\n<p>  null is not a property of the global object, is not an object even tho </p>\\n<pre><code class=\\\"language-js\\\">(typeof null === \\\"object\\\") // true\\n</code></pre>\\n<h3>Property Descriptors</h3>\\n<p>Introduced in ES6, these attrbutes describe the   </p>\\n<table>\\n<thead>\\n<tr>\\n<th>Attribute name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>[[Value]]</code></td>\\n<td>any</td>\\n<td>the value retrieved by this property</td>\\n</tr>\\n<tr>\\n<td><code>[[Writable]]</code></td>\\n<td>bool</td>\\n<td>if false the \\n<code>[[Value]]</code>\\n cant be changed</td>\\n</tr>\\n<tr>\\n<td><code>[[Enumerable]]</code></td>\\n<td>bool</td>\\n<td>if false property wont show up in for.. in loops</td>\\n</tr>\\n<tr>\\n<td><code>[[Configurable]]</code></td>\\n<td>bool</td>\\n<td>if false prop cant be deleted nor its property descriptors mutated</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Attempts at forbidden modification given configurable and/or  writable are silently ignored in lazy mode\\nand cause errors in strict.</p>\\n<p>A prop declared <code>[[Configurable]]</code> false cant be changed to true later.\\nIt is a one-way operation.</p>\\n<h3>Accessor properties</h3>\\n<p><code>[[Get]]</code> <code>[[Set]]</code> are functions that are called as accessors, mutators.</p>\\n<h4>Default values</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>Property Descriptor</th>\\n<th>default value</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>[[Value]]</code></td>\\n<td>undfined</td>\\n</tr>\\n<tr>\\n<td><code>[[Get]]</code></td>\\n<td>undefined</td>\\n</tr>\\n<tr>\\n<td><code>[[Set]]</code></td>\\n<td>undefined</td>\\n</tr>\\n<tr>\\n<td><code>[[Writable]]</code></td>\\n<td>false</td>\\n</tr>\\n<tr>\\n<td><code>[[Enumerable]]</code></td>\\n<td>false</td>\\n</tr>\\n<tr>\\n<td><code>[[Configurable]]</code></td>\\n<td>false</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3>Object.defineProperty</h3>\\n<p>  Object.defineProperty<T>(obj: T, prop: string, descr: descrObject): T</p>\\n<pre><code class=\\\"language-js\\\">  const obj = {};\\n\\n  Object.defineProperty(\\n    obj, \\n    \\\"meaningOfLife\\\", \\n    { \\n      value: 42, \\n      writable: false, \\n      configurable: false, \\n      enumerable: true\\n    }\\n  );\\n</code></pre>\\n<h2>Seal, Freeze, PreventExtensions</h2>\\n<ol>\\n<li><code>Object.preventExtensions(obj);</code>: it is not possible to add new properties to obj</li>\\n<li><code>Object.seal(obj)</code>: like 1. but every existing prop has configurable set to false</li>\\n<li><code>Object.freeze(obj)</code>: like 2. but every prop has writable set to false</li>\\n</ol>\\n<h2>Prototype</h2>\\n<p>Objects in js hae an internal property <code>[[Prototype]]</code> that links them to another object.</p>\\n<p>Whenever a property is looked-up in an object, if it not present it is looked up recursively in the prototype chain and if present it is returned otherwise undefined is the reuslt of the look up.</p>\\n<p>Similarly in a for..in iteration all the prop in the chain are returned.</p>\\n<p>At the top of most chains is Object.prototype, this object includes most common util methods.</p>\\n<h3>Shadowing</h3>\\n<p>Whenever a prop that is already defined on the prototype chain is defined on an object the following occurs:</p>\\n<ol>\\n<li>\\n<p>If that prop is marked as <code>writable: false</code> an error is thrown is strict or is silently ignored.</p>\\n</li>\\n<li>\\n<p>If that prop is a mutator (set) the function is <strong>always</strong> callled no shadowing occurs.</p>\\n</li>\\n<li>\\n<p>if the previous conditions are not met, the object is successfully added to the object and it <strong>shadows</strong> the prop defined in the prototype chain.</p>\\n</li>\\n</ol>\",\"frontmatter\":{\"date\":\"May 27, 2018\",\"path\":\"/p/js/object-and-types\",\"title\":\"Object and Types\",\"section\":\"js\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/p-js-object-and-types.json\n// module id = 465\n// module chunks = 172192788197335"],"sourceRoot":""}