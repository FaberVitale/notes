{"version":3,"sources":["webpack:///path---p-js-901fa95ddbb09195aad1.js","webpack:///./.cache/json/p-js.json"],"names":["webpackJsonp","473","module","exports","data","allMarkdownRemark","edges","node","excerpt","frontmatter","path","title","section","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,QAAA,4MAAAC,aAAqOC,KAAA,aAAAC,MAAA,eAAAC,QAAA,SAA8DL,MAAQC,QAAA,sMAAAC,aAA+NC,KAAA,gBAAAC,MAAA,UAAAC,QAAA,SAA4DL,MAAQC,QAAA,0MAAgEC,aAAqKC,KAAA,oBAAAC,MAAA,cAAAC,QAAA,SAAoEL,MAAQC,QAAA,oMAAAC,aAA6NC,KAAA,oBAAAC,MAAA,cAAAC,QAAA,SAAoEL,MAAQC,QAAA,yMAAAC,aAAkOC,KAAA,yBAAAC,MAAA,mBAAAC,QAAA,WAA+EC,aAAgBD,QAAA","file":"path---p-js-901fa95ddbb09195aad1.js","sourcesContent":["webpackJsonp([21735359339305],{\n\n/***/ 473:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"Nomenclature Execution context   a record created during function invocation.\\n  it holds information about where and how the function was invoked,\\n  arguments passed, a reference to this etc... Call…\",\"frontmatter\":{\"path\":\"/p/js/this\",\"title\":\"What's This?\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"  A promise is an object that is a placeholder of a deferred computation. Invariants a promise is in one of 3  mutually  exclusive states:  fulfilled, rejected or pending a promise  pending  can…\",\"frontmatter\":{\"path\":\"/p/js/promise\",\"title\":\"Promise\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Description  Opt-in using the pragma  \\\"use strict\\\"; Applied to the top of a function makes the whole function run in strict mode.\\nApplied to the top of a script makes the whole script run in strict…\",\"frontmatter\":{\"path\":\"/p/js/strict-mode\",\"title\":\"Strict Mode\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Es6 modules are file-based, aka one per file.\\nThe api of an es6 module is static:  imports/exports can only be defined at the top level once defined these bindings cannot be changed. they are…\",\"frontmatter\":{\"path\":\"/p/js/es6-modules\",\"title\":\"Es6 Modules\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Definition   Js is a object-oriented language where objects can be connect and share properties.\\n  Objects can be constructed using  constructor  functions.   A  constructor  is a function invoked…\",\"frontmatter\":{\"path\":\"/p/js/object-and-types\",\"title\":\"Object and Types\",\"section\":\"js\"}}}]}},\"pathContext\":{\"section\":\"js\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---p-js-901fa95ddbb09195aad1.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"Nomenclature Execution context   a record created during function invocation.\\n  it holds information about where and how the function was invoked,\\n  arguments passed, a reference to this etc... Call…\",\"frontmatter\":{\"path\":\"/p/js/this\",\"title\":\"What's This?\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"  A promise is an object that is a placeholder of a deferred computation. Invariants a promise is in one of 3  mutually  exclusive states:  fulfilled, rejected or pending a promise  pending  can…\",\"frontmatter\":{\"path\":\"/p/js/promise\",\"title\":\"Promise\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Description  Opt-in using the pragma  \\\"use strict\\\"; Applied to the top of a function makes the whole function run in strict mode.\\nApplied to the top of a script makes the whole script run in strict…\",\"frontmatter\":{\"path\":\"/p/js/strict-mode\",\"title\":\"Strict Mode\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Es6 modules are file-based, aka one per file.\\nThe api of an es6 module is static:  imports/exports can only be defined at the top level once defined these bindings cannot be changed. they are…\",\"frontmatter\":{\"path\":\"/p/js/es6-modules\",\"title\":\"Es6 Modules\",\"section\":\"js\"}}},{\"node\":{\"excerpt\":\"Definition   Js is a object-oriented language where objects can be connect and share properties.\\n  Objects can be constructed using  constructor  functions.   A  constructor  is a function invoked…\",\"frontmatter\":{\"path\":\"/p/js/object-and-types\",\"title\":\"Object and Types\",\"section\":\"js\"}}}]}},\"pathContext\":{\"section\":\"js\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/p-js.json\n// module id = 473\n// module chunks = 21735359339305"],"sourceRoot":""}