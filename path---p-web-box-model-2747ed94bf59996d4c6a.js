webpackJsonp([78327268539002],{470:function(e,l){e.exports={data:{markdownRemark:{html:'<p><a href="https://codepen.io/fabervitale/pen/MGQpja">https://codepen.io/fabervitale/pen/MGQpja</a></p>\n<p><a href="http://jsfiddle.net/y8Y32/25/">http://jsfiddle.net/y8Y32/25/</a></p>\n<h2>Element properties:</h2>\n<ul>\n<li>\n<p><em>ReadOnly Rounded</em></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight">clientHeight</a>: content width + padding - horizontal scrollbar, if present, (0 for inline or if not specified).</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth">clientWidth</a>: content height + padding - vertical scrollbar, if present.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight">scrollHeight</a>: clientHeight + overflow, if present.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth">scrollWidth</a>: clientWidth + overflow if present.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop">clientTop</a>: equals to elem.style.borderTopWidth</li>\n</ul>\n</li>\n<li>\n<p><em>editable</em></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop">scrollTop</a>: number of pixels scrolled horizontally.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft">scrollLeft</a>: number of pixels scrolled vertically.</li>\n</ul>\n</li>\n<li>\n<p><em>method</em></p>\n<ul>\n<li>\n<p>getClientBoundingRect(): returns size of the border-box of an    element and its position relative to the viewport.\nproperties:</p>\n<ul>\n<li>x: left edges horizontal position (poor support do not use)</li>\n<li>y: top edges vertical position (poor support do not use)</li>\n<li>top: height > 0 ? y : y + height</li>\n<li>bottom: height > 0 ? y + height : y</li>\n<li>left: width > 0 ? x : x + width</li>\n<li>right: width > 0 ? x + width : x</li>\n<li>width: border-box width</li>\n<li>height: border-box height</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>HTMLElement proprties:</h2>\n<ul>\n<li>\n<p><em>ReadOnly</em></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight">offsetHeight</a>:  content height + padding + border </li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth">offsetWidth</a>:  content width + padding + border</li>\n<li>offsetParent: element from</li>\n</ul>\n</li>\n</ul>\n<h2>CSS values</h2>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">htmlElement.style[camelCaseRule]</a>: returns only inline rules</li>\n<li>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">window.getComputedStyle(element,[psudoElement])</a>: returns computed styles, example:</p>\n<pre><code class="language-html">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n  &#x3C;style>\n    .paragraph {\n      height: 300px;\n    }\n  &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n  &#x3C;p class="paragraph">words words words...&#x3C;/p>  \n  &#x3C;script> \n    const paragraph = document.querySelector(".paragraph"); \n    const computedStyles = getComputedStyle(paragraph);\n    const computedHeight = computedStyles.getPropertyValue("height");\n    /* prints 300px */\n    console.log(computedHeight);\n  &#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n</li>\n</ul>\n<h2>Window properties</h2>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY">scrollY | pageYOffset</a>: amount scrolled on Y axis.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX">scrollX | pageXOffset</a>: amount scrolled on X axis.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight">innerHeight</a>: viewport height, hor scrollbar included, if present.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth">innerWidth</a>: viewport width, vert scrollbar included, if present.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight">outerHeight</a>: browser window height.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth">outerWidth</a>: browser window width.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX">screenX</a>: distance between browser window and top of the screen.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY">screenY</a>: distance between browser window and top of the screen.</li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen">screen</a>: interface that displays useful screen informations, screen.width, screen.height...</li>\n</ul>\n<h2>document.documentElement properties</h2>\n<p> on a standard html pages <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement">document.documentElement</a> returns  <html> as an HTMLElement hence we can use\nElement properties and HTMLELement properties(see above).</p>\n<p> For instance document.documentElement.scrollTop is equal to window.scrollY.</p>',frontmatter:{date:"May 27, 2018",path:"/p/web/box-model",title:"Box Model",section:"web"}}},pathContext:{}}}});
//# sourceMappingURL=path---p-web-box-model-2747ed94bf59996d4c6a.js.map